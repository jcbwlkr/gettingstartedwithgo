Getting Started with Go
An Introduction
21 Mar 2015

Jacob Walker
Gopher, Wrecking Ball Media Group
http://jacob-walker.com
@jcbwlkr

* Background

* Me

The majority of my experience is in PHP. I ventured into Ruby, Python, and
Node.js. Dabbled with C++.

Found Go and felt at home.

I'm not affiliated with Google, just a passionate ʕ◔ϖ◔ʔ

* Enter The Gopher
.image gopher.png

.caption _Gopher_ by [[http://www.reneefrench.com][Renée French]]

* Go
Originally developed at Google by Ken Thompson, Rob Pike, and Robert Griesemer.

Relatively young: started in 2007 and announced in 2009.

Compiled, Statically Typed, Concurrent, Imperative language.

Originally developed in response to pain points in C and C++, Go has become
very popular among developers coming from dynamic general purpose languages.

* Overview
My intended audience is someone who is interested in starting to use Go.

Any other gophers here?

- How to get started
- Notable Features of Go
- How to be successful

* How To Get Started

* Take the tour
[[https://tour.golang.org][https://tour.golang.org]]

* Install Go

- Recommended: Download from [[https://golang.org/doc/install][golang.org]] and unpack
  sudo tar -C /usr/local -xzf go1.4.linux-amd64.tar.gz
  export PATH=$PATH:/usr/local/go/bin                  # Add to profile
- Use package manager?
- Build from source?

* Test Installation

.code hello.go

  $ go run hello.go
  Hello, World

* How to Write Go Code
[[https://golang.org/doc/code.html][https://golang.org/doc/code.html]]

* Configue Workspace

  export GOPATH=$HOME/go         # Add to profile
  export PATH=$PATH:$GOPATH/bin  # Add to profile

  $HOME/go
  ├── bin
  ├── pkg
  └── src
      ├── bitbucket.com
      │   └── jcbwlkr
      │       └── hello
      └── github.com
          ├── hitjim
          │   └── coollib
          └── jcbwlkr
              ├── coolapp
              └── logger

  12 directories, 0 files

* Our First App

Put hello world in `$GOPATH/src/bitbucket.com/jcbwlkr/hello/main.go`

.code hello.go

* Build it!
  $ pwd
  ~/go/src/bitbucket.com/jcbwlkr/hello
  $ go build
  $ ./hello
  Hello, World

Take a look

  $ ls -lh
  total 1.8M
  -rwxr-xr-x 1 jwalker jwalker 1.8M Mar 20 11:04 hello*
  -rw-rw-r-- 1 jwalker jwalker   73 Mar 20 11:04 main.go

Single statically linked binary. Build, copy, run, profit!

* Compilation
- Compiles fast (really fast).
- Easy to compile
  go build
- Easy to cross compile
  GOOS=linux GOARCH=amd64 go build
- Feels like a scripted language.
  go run hello.go
- Can compile Go code that calls C code with `cgo`

* Our First Library

`$GOPATH/src/github.com/jcbwlkr/strings/strings.go`

.code strings.go

* Our First Test

`$GOPATH/src/github.com/jcbwlkr/strings/strings_test.go`

.code strings_test.go

* Testing Continued
  $ go test
  PASS
  ok      github.com/jcbwlkr/strings      0.004s

More options

  $ go test -bench=.
  $ go test -race
  $ go test -cover

* Fetch remote packages

  go get github.com/russross/blackfriday

.play markdown.go

* Notable Features

* Summary
- Simplicity
- Tooling
- Concurrency

* Simple syntax
- Only 25 keywords.
- Opinionated. Often only one way to do something.
- Only one looping construct `for` that can handle `for`, `foreach`, `while` styles of looping.
- Few needs for semicolons. Few need for parens.
- Mandatory braces. Have to be on same line.
- Double quotes for strings. Single quotes for single runes.
- Consistent, Predictable, Orthoganal

* gofmt
Core tool that enforces consistent coding style.

No more bike-shedding over style.

Tabs vs Spaces? Non-issue.

* Expansive standard library
[[http://golang.org/pkg/][http://golang.org/pkg/]]

- `net/http`: Build web servers and clients
- `text/template`, `html/template`: Templating tools
- `sync`: Tools supporting concurrency
- `encoding/json`: JSON Marshalling and Unmarshalling

* Multiple return values

.play multi-returns.go

* No exceptions

Intentionally omitted. Return and check errors instead.

.play errors.go

* Error Handling

Don't ignore errors!

Handling errors can be repetitive but being explicit you know how they are
handled. You have the full power of the language at your disposal to respond to
errors.

Use `Must` versions when you know it won't error such as `MustCompile`.

Combine error handling when appropriate.

`panic` only when absolutely necessary

Blog post by Rob Pike: [[https://blog.golang.org/errors-are-values][Errors Are Values]]

* Concurrency With "go"

.play concurrency.go

* Synchronized Concurrency

.play concurrency-waitgroups.go

* Concurrency Continued

- Channels: Typed conduits for communicating between goroutines. Use for message passing and synchronization.
- Package `sync` provides Mutexes, WaitGroups and other synchronization tools.

* More Notable Features
- Statically Typed
- Automatic garbage collection
- OOP Composition over Inheritance (No direct inheritance)
- Implicit interfaces
- First class unicode Support
- No generics

* How to Be Successful

* Read!
- [[https://golang.org/doc/effective_go.html][Effective Go ]]
- [[https://github.com/golang/go/wiki/CodeReviewComments][Code Review Comments]]
- [[https://golang.org/ref/spec][The spec]]
- [[https://golang.org/doc/faq][The FAQ]]
- [[https://blog.golang.org/index][The Go Blog]]
- Read the standard library source

* Use the tools
- `gofmt` (or `goimports`) on save
- `golint` look for style errors
- `go`vet` look for suspicious / dangerous code
- `godoc` browse Go Doc of all locally installed packages

* Editor Love
Editor Plugins

- [[https://github.com/fatih/vim-go][Vim-Go]]
- [[https://github.com/dominikh/go-mode.el][Emacs go-mode]]
- [[https://atom.io/packages/go-plus][Atom.io go-plus]]
- [[https://github.com/DisposaBoy/GoSublime][GoSublime]]

IDE

- [[https://github.com/visualfc/liteide][LiteIDE]]

* Misc & Best Practices
- Write Idiomatic Go. Don't try to write Python/Ruby/Java.
- Vendor your dependencies
- Use channels to communicate between goroutines.
  Do not communicate by sharing memory; instead, share memory by communicating.
- Go, not Golang

* Community
- [[http://bit.ly/go-slack-signup][Gopher Slack]]
- `#go-nuts` on `irc.freenode.net`
- [[http://exercism.io/][Exercism.io]] Go exercises with community sourced feedback
- [[http://golang-challenge.com/][Monthly Go Challenge]]

* Other Resources
- [[https://github.com/avelino/awesome-go][Awesome Go]] (curated list of great community packages)
- [[https://gobyexample.com/][Go By Example]] Go tutorials
- [[http://golangweekly.com/][Golang weekly]] free weekly newsletter
- RSS Feed of StackOverflow questions tagged `go`
