Getting Started with Go
An Unofficial Introduction
20 Mar 2015

Jacob Walker
Gopher, Wrecking Ball Media Group
http://jacob-walker.com
@jcbwlkr

* Background

* Me

The majority of my experience is in PHP. I ventured into Ruby, Python, and
Node.js. Dabbled with C++.

Found Go and felt at home.

I'm not affiliated with Google, just a passionate ʕ◔ϖ◔ʔ

* Enter The Gopher
.image gopher.png

.caption _Gopher_ by [[http://www.reneefrench.com][Renée French]]

* Go
Originally developed at Google by Ken Thompson, Rob Pike, and Robert Griesemer.

Relatively young: started in 2007 and announced in 2009.

Compiled, Statically Typed, Concurrent, Imperative language.

Originally developed in response to pain points in C and C++, Go has become
very popular among developers coming from dynamic general purpose languages.

* Overview
My intended audience is someone who is interested in starting to use Go.

- How to get started
- Notable Features of Go
- How to be successful

* How To Get Started

* Take the tour
[[https://tour.golang.org][https://tour.golang.org]]

* Install Go

- Recommended: Download from [[https://golang.org/doc/install][golang.org]] and unpack
  sudo tar -C /usr/local -xzf go1.4.linux-amd64.tar.gz
  export PATH=$PATH:/usr/local/go/bin # Add to profile
- Use package manager?
- Build from source?

* Test Installation

.code hello.go

  $ go run hello.go
  Hello, World

* How to Write Go Code
[[https://golang.org/doc/code.html][https://golang.org/doc/code.html]]

* Set GOPATH

  export GOPATH=$HOME/go # Add to profile
  export PATH=$PATH:$GOPATH/bin # Add to profile

  $HOME/go
  ├── bin
  ├── pkg
  └── src
      ├── bitbucket.com
      │   └── jcbwlkr
      │       └── hello
      └── github.com
          ├── hitjim
          │   └── coollib
          └── jcbwlkr
              ├── coolapp
              └── logger

  12 directories, 0 files

* Our First App

Put hello world in `$GOPATH/src/bitbucket.com/jcbwlkr/hello/main.go`

.code hello.go

* Build it!
  $ pwd
  ~/go/src/bitbucket.com/jcbwlkr/hello
  $ go build
  $ ./hello
  Hello, World

Take a look

  $ ls -lh
  total 1.8M
  -rwxr-xr-x 1 jwalker jwalker 1.8M Mar 20 11:04 hello*
  -rw-rw-r-- 1 jwalker jwalker   73 Mar 20 11:04 main.go

Single statically linked binary. Build, copy, run, profit!

* Compilation
- Compiles fast (really fast).
- Easy to compile
  go build
- Easy to cross compile
  GOOS=linux GOARCH=amd64 go build
- Feels like a scripted language.
  go run hello.go
- Can compile Go code that calls C code with `cgo`

* Our First Library

`$GOPATH/src/github.com/jcbwlkr/strings/strings.go`

.code strings.go

* Our First Test

`$GOPATH/src/github.com/jcbwlkr/strings/strings_test.go`

.code strings_test.go

  $ go test
  PASS
  ok      github.com/jcbwlkr/strings      0.004s

* Notable Features

* Summary
- Simplicity
- Tooling
- Concurrency

* Simple syntax
- Only 25 keywords.
- Opinionated. Often only one way to do something.
- Only one looping construct `for` that can handle `for`, `foreach`, `while` styles of looping.
- Few needs for semicolons. Few need for parens.
- Mandatory braces. Have to be on same line.
- Only double quotes for strings. Single quotes for runes.
- Implicit types through short assignment `:=`

* gofmt
Core tool that enforces consistent coding style.

No more bike-shedding over style.

Tabs vs Spaces? Non-issue.

* Hello World

.play hello.go

* Fetch remote packages
  go get github.com/russross/blackfriday

Or add import statement then run `go`get` without arguments.

* Fetch remote packages

.play markdown.go


* Multiple return values

.play multi-returns.go

* No exceptions

Intentionally omitted. Return and check errors instead.

.play errors.go

* Error Handling

Handling errors can be repetitive but being explicit you know how they are
handled. You have the full power of the language at your disposal to respond to
errors.

Use `Must` versions when you know it won't error such as `MustCompile`.

Combine error handling when appropriate.

`panic` only when absolutely necessary

Get creative.

Blog post by Rob Pike: [[https://blog.golang.org/errors-are-values][Errors Are Values]]


* How to Be Successful
- Community
- Effective Go https://golang.org/doc/effective_go.html
- Code Review Comments https://github.com/golang/go/wiki/CodeReviewComments
- gofmt (or goimports) on save
- golint
- go vet
- Read the spec
- Read the source
- Read the FAQ

* Other Resources
- https://github.com/avelino/awesome-go
- https://gobyexample.com/
- golang weekly
- Gopher Slack

* Credits
